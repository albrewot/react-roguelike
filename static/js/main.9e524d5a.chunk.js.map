{"version":3,"sources":["classes/InputManager.js","config/colors.js","classes/Entity.js","classes/Player.js","classes/World.js","classes/Loot.js","classes/Monster.js","classes/Stairs.js","classes/Spawner.js","components/ReactRogue.js","App.js","serviceWorker.js","index.js"],"names":["InputManager","observer","handleKeys","e","preventDefault","keyCode","broadcast","x","y","fn","this","push","filter","subscriber","action","data","document","addEventListener","removeEventListener","colors","player","wall","Entity","size","atributes","verb","world","console","log","context","fillStyle","color","textBaseline","font","fillText","ascii","offset","Player","name","health","inventory","dx","dy","item","newPlayer","Object","assign","World","width","height","tilesize","worldmap","Array","entities","history","entity","ent","find","getEntityAtLocation","tempPlayer","copyPlayer","move","isWall","undefined","map","Map","Cellular","connected","randomize","userCallback","value","create","connect","drawWall","draw","fillRect","length","shift","Loot","add","remove","Monster","addToHistory","Stairs","createCellularMap","moveToSpace","spawner","Spawner","spawnLoot","spawnMonsters","spawnStairs","lootTable","monsterTable","getRandomInt","max","Math","floor","random","spawnCount","createEntity","count","spawn","stairs","styles","container","display","flexDirection","canvas","border","background","ReactRogue","useState","setWorld","canvasRef","useRef","inputManager","handleInput","JSON","stringify","newWorld","movePlayer","useEffect","bindKeys","subscribe","unbindKeys","unsubscribe","ctx","current","getContext","clearRect","style","ref","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e524d5a.chunk.js","sourcesContent":["class InputManager {\r\n  observer = [];\r\n\r\n  subscribe(fn) {\r\n    this.observer.push(fn);\r\n  }\r\n\r\n  unsubscribe(fn) {\r\n    this.observer = this.observer.filter(subscriber => subscriber !== fn);\r\n  }\r\n\r\n  broadcast(action, data) {\r\n    for (let subscriber of this.observer) {\r\n      subscriber(action, data);\r\n    }\r\n  }\r\n\r\n  handleKeys = e => {\r\n    e.preventDefault();\r\n    switch (e.keyCode) {\r\n      case 65: // A Key\r\n      case 37: // Left Arrow\r\n        this.broadcast(\"move\", { x: -1, y: 0 });\r\n        break;\r\n      case 87: // W Key\r\n      case 38: // Up Arrow\r\n        this.broadcast(\"move\", { x: 0, y: -1 });\r\n        break;\r\n      case 68: // D Key\r\n      case 39: // Right Arrow\r\n        this.broadcast(\"move\", { x: 1, y: 0 });\r\n        break;\r\n      case 83: // S Key\r\n      case 40: // Down Arrow\r\n        this.broadcast(\"move\", { x: 0, y: 1 });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  bindKeys() {\r\n    document.addEventListener(\"keydown\", this.handleKeys);\r\n  }\r\n\r\n  unbindKeys() {\r\n    document.removeEventListener(\"keydown\", this.handleKeys);\r\n  }\r\n}\r\n\r\nexport default InputManager;\r\n","const colors = {\r\n  player: \"#F00\",\r\n  wall: \"#000\"\r\n};\r\n\r\nexport default colors;\r\n","class Entity {\r\n  constructor(x, y, size, atributes) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.size = size;\r\n    this.atributes = { ...atributes };\r\n  }\r\n\r\n  action(verb, world) {\r\n    console.log(`Verb: ${verb}`);\r\n  }\r\n\r\n  draw(context) {\r\n    context.fillStyle = this.atributes.color || \"white\";\r\n    context.textBaseline = \"hanging\";\r\n    context.font = \"16px Helvetica\";\r\n    context.fillText(\r\n      this.atributes.ascii,\r\n      this.x * this.size +\r\n        (this.atributes.offset ? this.atributes.offset.x : 0),\r\n      this.y * this.size + (this.atributes.offset ? this.atributes.offset.y : 0)\r\n    );\r\n  }\r\n}\r\n\r\nexport default Entity;\r\n","import colors from \"../config/colors\";\r\nimport Entity from \"./Entity\";\r\n\r\nclass Player extends Entity {\r\n  atributes = {\r\n    name: \"Player\",\r\n    ascii: \"@\",\r\n    health: 10\r\n  };\r\n\r\n  inventory = [];\r\n\r\n  move(dx, dy) {\r\n    if (this.atributes.health <= 0) return;\r\n    this.x += dx;\r\n    this.y += dy;\r\n  }\r\n\r\n  add(item) {\r\n    this.inventory.push(item);\r\n  }\r\n\r\n  // draw(context) {\r\n  //   context.fillStyle = colors.player;\r\n  //   context.textBaseline = \"hanging\";\r\n  //   context.font = \"16px Helvetica\";\r\n  //   context.fillText(\"@\", this.x * this.size, this.y * this.size);\r\n  // }\r\n\r\n  copyPlayer() {\r\n    let newPlayer = new Player();\r\n    Object.assign(newPlayer, this);\r\n    return newPlayer;\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import { Map } from \"rot-js\";\r\nimport Player from \"./Player\";\r\nimport colors from \"../config/colors\";\r\n\r\nclass World {\r\n  constructor(width, height, tilesize) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.tilesize = tilesize;\r\n    this.worldmap = new Array(this.width);\r\n    this.entities = [new Player(0, 0, 16)];\r\n    this.history = [];\r\n\r\n    for (let x = 0; x < this.width; x++) {\r\n      this.worldmap[x] = new Array(this.height);\r\n    }\r\n\r\n    // this.createCellularMap();\r\n  }\r\n\r\n  // createRandomWorld() {\r\n  //   for (let x = 0; x < this.width; x++) {\r\n  //     for (let y = 0; y < this.height; y++) {\r\n  //       this.worldmap[x][y] = Math.round(Math.random());\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  get player() {\r\n    return this.entities[0];\r\n  }\r\n\r\n  add(entity) {\r\n    this.entities.push(entity);\r\n  }\r\n\r\n  remove(entity) {\r\n    this.entities = this.entities.filter(ent => ent !== entity);\r\n  }\r\n\r\n  getEntityAtLocation(x, y) {\r\n    return this.entities.find(entity => entity.x === x && entity.y === y);\r\n  }\r\n\r\n  moveToSpace(entity) {\r\n    for (let x = entity.x; x < this.width; x++) {\r\n      for (let y = entity.y; y < this.height; y++) {\r\n        if (this.worldmap[x][y] === 0 && !this.getEntityAtLocation(x, y)) {\r\n          entity.x = x;\r\n          entity.y = y;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  movePlayer(dx, dy) {\r\n    let tempPlayer = this.player.copyPlayer();\r\n    tempPlayer.move(dx, dy);\r\n    let entity = this.getEntityAtLocation(tempPlayer.x, tempPlayer.y);\r\n    if (entity) {\r\n      console.log(entity);\r\n      entity.action(\"bump\", this);\r\n      return;\r\n    }\r\n    if (this.isWall(tempPlayer.x, tempPlayer.y)) {\r\n      console.log(`way blocked at ${tempPlayer.x}, ${tempPlayer.y}`);\r\n    } else {\r\n      this.player.move(dx, dy);\r\n    }\r\n  }\r\n\r\n  isWall(x, y) {\r\n    return (\r\n      this.worldmap[x] === undefined ||\r\n      this.worldmap[y] === undefined ||\r\n      this.worldmap[x][y] === 1\r\n    );\r\n  }\r\n\r\n  createCellularMap() {\r\n    const map = new Map.Cellular(this.width, this.height, { connected: true });\r\n    map.randomize(0.5);\r\n\r\n    const userCallback = (x, y, value) => {\r\n      if (x === 0 || y === 0 || x === this.width - 1 || y === this.height - 1) {\r\n        this.worldmap[x][y] = 1;\r\n        return;\r\n      }\r\n      this.worldmap[x][y] = value === 0 ? 1 : 0;\r\n    };\r\n\r\n    map.create(userCallback);\r\n\r\n    map.connect(userCallback, 1);\r\n  }\r\n\r\n  draw(context) {\r\n    for (let x = 0; x < this.width; x++) {\r\n      for (let y = 0; y < this.height; y++) {\r\n        if (this.worldmap[x][y] === 1) this.drawWall(context, x, y);\r\n      }\r\n    }\r\n\r\n    for (let entity of this.entities) {\r\n      entity.draw(context);\r\n    }\r\n  }\r\n\r\n  drawWall(context, x, y) {\r\n    context.fillStyle = colors.wall;\r\n    context.fillRect(\r\n      x * this.tilesize,\r\n      y * this.tilesize,\r\n      this.tilesize,\r\n      this.tilesize\r\n    );\r\n  }\r\n\r\n  addToHistory(history) {\r\n    this.history.push(history);\r\n    if (this.history.length > 6) this.history.shift();\r\n  }\r\n}\r\n\r\nexport default World;\r\n","import Entity from \"./Entity\";\r\n\r\nclass Loot extends Entity {\r\n  action(verb, world) {\r\n    if (verb === \"bump\") {\r\n      world.player.add(this);\r\n      world.remove(this);\r\n    }\r\n\r\n    if (verb === \"drop\") {\r\n      console.log(\"drop\", this);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Loot;\r\n","import Entity from \"./Entity\";\r\n\r\nclass Monster extends Entity {\r\n  action(verb, world) {\r\n    if (verb === \"bump\") {\r\n      world.addToHistory(`Player attacks ${this.atributes.name}!`);\r\n      this.atributes.health = this.atributes.health - 1;\r\n      if (this.atributes.health <= 0) {\r\n        world.remove(this);\r\n        world.addToHistory(`${this.atributes.name} died!`);\r\n      } else {\r\n        world.addToHistory(\r\n          `${this.atributes.name}'s health = ${this.atributes.health}`\r\n        );\r\n        world.player.atributes.health = world.player.atributes.health - 1;\r\n        if (world.player.atributes.health <= 0) {\r\n          world.addToHistory(`You have died`);\r\n        } else {\r\n          world.addToHistory(\r\n            `Your current health is: ${world.player.atributes.health}`\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Monster;\r\n","import Entity from \"./Entity\";\r\nimport Spawner from \"./Spawner\";\r\n\r\nclass Stairs extends Entity {\r\n  atributes = {\r\n    name: \"Stairs\",\r\n    color: \"black\",\r\n    ascii: \">\",\r\n    offset: { x: 2, y: 2 }\r\n  };\r\n\r\n  action(verb, world) {\r\n    if (verb === \"bump\") {\r\n      world.addToHistory(\"You move down the stairs...\");\r\n      world.createCellularMap();\r\n      world.player.x = 0;\r\n      world.player.y = 0;\r\n      world.moveToSpace(world.player);\r\n      world.entities = world.entities.filter(e => e === world.player);\r\n      let spawner = new Spawner(world);\r\n      spawner.spawnLoot(10);\r\n      spawner.spawnMonsters(6);\r\n      spawner.spawnStairs();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Stairs;\r\n","import Loot from \"./Loot\";\r\nimport Monster from \"./Monster\";\r\nimport Stairs from \"./Stairs\";\r\n\r\nconst lootTable = [\r\n  { name: \"Long Sword\", color: \"darkgrey\", ascii: \"/\", offset: { x: 6, y: 3 } },\r\n  { name: \"Health Potion\", color: \"red\", ascii: \"!\", offset: { x: 6, y: 3 } },\r\n  { name: \"Gold Coin\", color: \"yellow\", ascii: \"$\", offset: { x: 3, y: 3 } },\r\n  {\r\n    name: \"Light Armor\",\r\n    color: \"lightgrey\",\r\n    ascii: \"#\",\r\n    offset: { x: 4, y: 3 }\r\n  }\r\n];\r\n\r\nconst monsterTable = [\r\n  {\r\n    name: \"Ogre\",\r\n    color: \"lightgrey\",\r\n    ascii: \"O\",\r\n    offset: { x: 2, y: 3 },\r\n    health: 6\r\n  },\r\n  {\r\n    name: \"Kobold\",\r\n    color: \"green\",\r\n    ascii: \"k\",\r\n    offset: { x: 4, y: 3 },\r\n    health: 3\r\n  },\r\n  {\r\n    name: \"Slime\",\r\n    color: \"darkgreen\",\r\n    ascii: \"S\",\r\n    offset: { x: 3, y: 2 },\r\n    health: 2\r\n  },\r\n  {\r\n    name: \"Dragon\",\r\n    color: \"red\",\r\n    ascii: \"D\",\r\n    offset: { x: 2, y: 3 },\r\n    health: 10\r\n  }\r\n];\r\n\r\nclass Spawner {\r\n  constructor(world) {\r\n    this.world = world;\r\n  }\r\n\r\n  spawn(spawnCount, createEntity) {\r\n    for (let count = 0; count < spawnCount; count++) {\r\n      let entity = createEntity();\r\n      this.world.add(entity);\r\n      this.world.moveToSpace(entity);\r\n    }\r\n  }\r\n\r\n  spawnLoot(spawnCount) {\r\n    this.spawn(spawnCount, () => {\r\n      return new Loot(\r\n        getRandomInt(this.world.width - 1),\r\n        getRandomInt(this.world.height - 1),\r\n        this.world.tilesize,\r\n        lootTable[getRandomInt(lootTable.length)]\r\n      );\r\n    });\r\n  }\r\n\r\n  spawnMonsters(spawnCount) {\r\n    this.spawn(spawnCount, () => {\r\n      return new Monster(\r\n        getRandomInt(this.world.width - 1),\r\n        getRandomInt(this.world.height - 1),\r\n        this.world.tilesize,\r\n        monsterTable[getRandomInt(monsterTable.length)]\r\n      );\r\n    });\r\n  }\r\n\r\n  spawnStairs() {\r\n    let stairs = new Stairs(\r\n      this.world.width - 10,\r\n      this.world.height - 10,\r\n      this.world.tilesize\r\n    );\r\n    this.world.add(stairs);\r\n    this.world.moveToSpace(stairs);\r\n  }\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport default Spawner;\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport InputManager from \"../classes/InputManager\";\r\nimport World from \"../classes/World\";\r\nimport Spawner from \"../classes/Spawner\";\r\n\r\nconst ReactRogue = ({ width, height, tilesize }) => {\r\n  // const [player, setPlayer] = useState(new Player(1, 2, tilesize));\r\n  const [world, setWorld] = useState(new World(width, height, tilesize));\r\n  const canvasRef = useRef();\r\n  let inputManager = new InputManager();\r\n  const handleInput = (action, data) => {\r\n    console.log(`handle input: ${action} : ${JSON.stringify(data)}`);\r\n    let newWorld = new World();\r\n    Object.assign(newWorld, world);\r\n    newWorld.movePlayer(data.x, data.y);\r\n    setWorld(newWorld);\r\n  };\r\n\r\n  //Created the world\r\n  useEffect(() => {\r\n    let newWorld = new World();\r\n    Object.assign(newWorld, world);\r\n    newWorld.createCellularMap();\r\n    newWorld.moveToSpace(world.player);\r\n    let spawner = new Spawner(newWorld);\r\n    spawner.spawnLoot(10);\r\n    spawner.spawnMonsters(6);\r\n    spawner.spawnStairs();\r\n    setWorld(newWorld);\r\n  }, []);\r\n\r\n  //handles the input\r\n  useEffect(() => {\r\n    console.log(\"Bind input\");\r\n    inputManager.bindKeys();\r\n    inputManager.subscribe(handleInput);\r\n\r\n    return () => {\r\n      inputManager.unbindKeys();\r\n      inputManager.unsubscribe(handleInput);\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"Draw to canvas\");\r\n    const ctx = canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, width * tilesize, height * tilesize);\r\n    world.draw(ctx);\r\n    // player.draw(ctx);\r\n  });\r\n  return (\r\n    <div style={styles.container}>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={width * tilesize}\r\n        height={height * tilesize}\r\n        style={styles.canvas}\r\n      ></canvas>\r\n      <ul>\r\n        <li>Inventory</li>\r\n        <li>---</li>\r\n        {world.player.inventory.map((item, index) => (\r\n          <li key={index}>{item.atributes.name}</li>\r\n        ))}\r\n      </ul>\r\n      <ul>\r\n        <li>Log</li>\r\n        <li>---</li>\r\n        {world.history.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\"\r\n  },\r\n  canvas: {\r\n    border: \"1px solid black\",\r\n    background: \"DimGray\"\r\n  }\r\n};\r\n\r\nexport default ReactRogue;\r\n","import React from \"react\";\nimport ReactRogue from \"./components/ReactRogue\";\n\nconst App = () => {\n  return (\n    <div>\n      <ReactRogue width={40} height={40} tilesize={16} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}